global
  maxconn 20000
# daemon
  log stdout format raw local0 err
  nbthread 4
  tune.maxrewrite 8192
  tune.bufsize 32768
  #stats socket "./haproxy.sock" mode 600 level admin expose-fd listeners
  ssl-default-bind-options ssl-min-ver TLSv1.2

defaults
  log global
  option httplog
  option logasap
  errorfile 503 "error-page-503.http"
  timeout connect 30s
  timeout client 30s
  timeout client-fin 1s
  timeout server 30s
  timeout server-fin 1s
  timeout http-request 10s
  timeout http-keep-alive 300s
  timeout tunnel 30s

frontend public
  bind :18080
  mode http
  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP
  monitor-uri /_______internal_router_healthz

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # check if we need to redirect/force using https.
  acl secure_redirect base,map_reg(os_route_http_redirect.map) -m found
  redirect scheme https if secure_redirect

  use_backend %[base,map_reg(os_http_be.map)]

  default_backend openshift_default

frontend public_ssl
  option tcplog
  bind :18443
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }

  # if the connection is SNI and the route is a passthrough don't use the termination backend, just use the tcp backend
  # for the SNI case, we also need to compare it in case-insensitive mode (by converting it to lowercase) as RFC 4343 says
  acl sni req.ssl_sni -m found
  acl sni_passthrough req.ssl_sni,lower,map_reg(os_sni_passthrough.map) -m found
  use_backend %[req.ssl_sni,lower,map_reg(os_tcp_be.map)] if sni sni_passthrough

  # if the route is SNI and NOT passthrough enter the termination flow
  use_backend be_sni if sni

  # non SNI requests should enter a default termination backend rather than the custom cert SNI backend since it
  # will not be able to match a cert to an SNI host
  default_backend be_no_sni

##########################################################################
# TLS SNI
#
# When using SNI we can terminate encryption with custom certificates.
# Certs will be stored in a directory and will be matched with the SNI host header
# which must exist in the CN of the certificate.  Certificates must be concatenated
# as a single file (handled by the plugin writer) per the haproxy documentation.
#
# Finally, check re-encryption settings and re-encrypt or just pass along the unencrypted
# traffic
##########################################################################
backend be_sni
  server fe_sni :10444 weight 1

frontend fe_sni
  # terminate ssl on edge
  bind :10444 crt-list cert_config.map
  mode http

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # Search from most specific to general path (host case).
  # Note: If no match, haproxy uses the default_backend, no other
  #       use_backend directives below this will be processed.
  use_backend %[base,map_reg(os_edge_reencrypt_be.map)]

  default_backend openshift_default

# backend for when sni does not exist, or ssl term needs to happen on the edge
backend be_no_sni
  server fe_no_sni 127.0.0.1:10443 weight 1

frontend fe_no_sni
  # terminate ssl on edge
  bind 127.0.0.1:10443
  mode http

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # map to backend
  # Search from most specific to general path (host case).
  # Note: If no match, haproxy uses the default_backend, no other
  #       use_backend directives below this will be processed.
  use_backend %[base,map_reg(os_edge_reencrypt_be.map)]

  default_backend openshift_default

backend openshift_default
  mode http
  option forwardfor
  #option http-keep-alive
  option http-pretend-keepalive

backend be_edge:default:app-0-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie 11ce91c7f9feec9e257404a3c2ef73eb insert indirect nocache httponly

server pod:app-0:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie 806b540f3e5ec2c368ee6ba3669ffd2c weight 256

backend be_edge:default:app-1-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie b99a6e8d3dd6bde8f8900daa9cb3bf71 insert indirect nocache httponly

server pod:app-1:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie 3054577d5cd954cdbac28b7d528673f6 weight 256

backend be_edge:default:app-2-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie 3aa4ac7b858bcf78a2ec7ce30313e80c insert indirect nocache httponly

server pod:app-2:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie cb0ed0be271195a15ebf5c60a3a07893 weight 256

backend be_edge:default:app-3-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie 2e5b4f73ad762c8b79513e18e2e9a7ee insert indirect nocache httponly

server pod:app-3:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie 5177d6749667869df0ef457ac99adb2b weight 256

backend be_edge:default:app-4-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie 40feac9016193146fc82e1773b3a940c insert indirect nocache httponly

server pod:app-4:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie b7a53640be653b91ac98a187f498f1c6 weight 256

backend be_edge:default:app-5-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie d82f9f83875be3fe8b5d1b282f4e2e92 insert indirect nocache httponly

server pod:app-5:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie 5aacb7fbc10a2143c8235c7879e5dbe7 weight 256

backend be_edge:default:app-6-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie 012a00f4a519fd686249d861ea056dbf insert indirect nocache httponly

server pod:app-6:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie 6428b6eb7fd9006d04587a064ea055fd weight 256

backend be_edge:default:app-7-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie e5cbe789f1d1f001a1adaec168061fe4 insert indirect nocache httponly

server pod:app-7:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie e41b22b49071991e2bf29b4743ca1ba0 weight 256

backend be_edge:default:app-8-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie 93964f3f21602561b23a2d0588d518e1 insert indirect nocache httponly

server pod:app-8:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie 77f35326b3cde9f671a2b7ca47008f85 weight 256

backend be_edge:default:app-9-edge
  mode http
  option redispatch
  option forwardfor
  balance random

  timeout check 5000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)];proto-version=%[req.hdr(X-Forwarded-Proto-Version)]
  cookie 9e2b2256241a14f2854aef2246d0c0c9 insert indirect nocache httponly

server pod:app-9:replica-0:10.128.0.0:1000 127.0.0.1:9001 cookie b047cedd6e78c882abccc2d79fb75a93 weight 256
