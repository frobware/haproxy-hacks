#!/usr/bin/env bash

set -u
set -o pipefail

thisdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

declare -a colval=("time_namelookup"
		   "time_connect - time_namelookup"
		   "time_app_connect - time_connect"
		   "time_starttransfer - time_pretransfer"
		   "time_total - time_starttransfer"
		   "time_total")

declare -a colname=("DNS Lookup"
		    "TCP Connection"
		    "TLS Handshake"
		    "Server Processing"
		    "Content Transfer"
		    "Completed")

drop_dns_outliers=0
highlight_filter=0.5
highlight_outliers=0
time_field="time_total"
keep_db=0
order_by_field="queryid";
bins="total"
summary=0
limit=15

PARAMS=""
while (( "$#" )); do
    case "$1" in
	-b|--bins)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		bins=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-d|--drop-dns-outliers)
	    drop_dns_outliers=1
	    shift
	    ;;
	-f|--time-field)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		time_field=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-h|--highlight-outliers)
	    highlight_outliers=1
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		highlight_filter=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-k|--keep-db)
	    keep_db=1
	    shift
	    ;;
	-l|--limit)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		limit=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-o|--order-by)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		order_by_field=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-s|--summary)
	    summary=1
	    shift
	    ;;
	-*|--*=)
	    echo "Error: Unsupported flag $1" >&2
	    exit 1
	;;
	*) # preserve positional arguments
	    PARAMS="$PARAMS $1"
	    shift
	    ;;
    esac
done

# reset positional arguments
eval set -- "$PARAMS"
results_file=${1:?no-results-file}

t=$(mktemp)
db=$(mktemp)

awk '{ print $1, $2, $4, $6, $8, $10, $12, $14, $16, $18 }' "$results_file" > "$t"

"$thisdir/sqlite3" "$db" <<EOF
CREATE TABLE summary(NAME TEXT, MIN REAL, MAX REAL, AVG REAL, MEDIAN REAL, STDEV REAL);
CREATE TABLE results (queryid INTEGER PRIMARY KEY,
	timestamp TEXT,
	time_namelookup REAL,
	time_connect REAL,
	time_app_connect REAL,
	time_pretransfer REAL,
	time_starttransfer REAL,
	http_code INTEGER,
	port INTEGER,
	time_total REAL);
.separator " "
.import $t results
UPDATE results
SET time_app_connect = time_connect
WHERE time_app_connect == 0.0;
EOF

for i in "${!colname[@]}"; do
    "$thisdir/sqlite3" "$db" <<EOF
INSERT INTO summary(Name, Min, Max, Avg, Median, Stdev)
SELECT "${colname[$i]}",
       Min(${colval[$i]}),
       Max(${colval[$i]}),
       Avg(${colval[$i]}),
       Median(${colval[$i]}),
       Stdev(${colval[$i]})
FROM results;
EOF
done

if [[ $drop_dns_outliers == 1 ]]; then
    count=$("$thisdir/sqlite3" "$db" "SELECT COUNT(*) FROM results WHERE time_namelookup >= 5.0")
    echo "Dropping $count DNS outliers at >= 5.0s"
    "$thisdir/sqlite3" "$db" "DELETE FROM results WHERE time_namelookup >= 5.0;"
fi

if [[ $highlight_outliers == 0 ]]; then
    # count=$("$thisdir/sqlite3" "$db" "SELECT $time_field FROM results ORDER BY $time_field ASC LIMIT 1 OFFSET (SELECT COUNT(*) FROM results) * 99 / 100 - 1")
    # echo "Automatically setting highlight filter to $time_field(99%)"
    # highlight_filter=$count
    :
fi

for i in $bins; do
    echo
    "$thisdir/sqlite3" "$db" <<EOF
.headers on
.mode column

SELECT printf("%.6f", histo.bin) as "bin-$i",
       histo.bincount,
       histo.accumcount,
       Cast(Sum(bincount)
	      OVER (
		ORDER BY accumcount) / Cast((SELECT Count(time_$i)
					     FROM   results) AS REAL) * 100.0 AS
	    INTEGER)        AS "acccum%age"
FROM   Histo("results", "time_$i", ${NBINS:-20}, (SELECT Min(time_$i)
						FROM results) - 0.0001,
					     (SELECT Max(time_$i)
						FROM results) + 0.0001);
EOF
done

echo
"$thisdir/sqlite3" "$db" <<EOF
.headers on
.mode column
SELECT printf("%17s", name) as Sequence,
       printf("%.6f", Min) as Min,
       printf("%.6f", Max) as Max,
       printf("%.6f", Avg) as Avg,
       printf("%.6f", Median) as MEDIAN,
       printf("%.6f", Stdev) as STDEV
FROM summary;
EOF

[ $summary -eq 1 ] && exit 0

#COUNT(*) OVER (ROWS UNBOUNDED PRECEDING) AS count,
echo
"$thisdir/sqlite3" "$db" <<EOF
.headers on
.mode column
select
       queryid,
       timestamp,
       printf("%.6f", ${colval[0]}) AS "${colname[0]}",
       printf("%.6f", ${colval[1]}) AS "${colname[1]}",
       printf("%.6f", ${colval[2]}) AS "${colname[2]}",
       printf("%.6f", ${colval[3]}) AS "${colname[3]}",
       printf("%.6f", ${colval[4]}) AS "${colname[4]}",
       printf("%.6f", ${colval[5]}) AS "${colname[5]}",
       port,
       http_code,
       printf("%.6f", time_total) AS "TOTAL"
FROM results
WHERE $time_field >= $highlight_filter
ORDER BY $order_by_field
LIMIT $limit
EOF

rm "$t"

if [ $keep_db -eq 1 ]; then
    echo "Database: $db"
else
    rm "$db"
fi
