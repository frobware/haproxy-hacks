#!/usr/bin/env bash

set -u
set -o pipefail

thisdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"

drop_dns_outliers=0
highlight_filter=0.5
highlight_outliers=0
time_field="time_total"
keep_db=0
order_by_field="queryid";
bins="total"

PARAMS=""
while (( "$#" )); do
    case "$1" in
	-b|--bins)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		bins=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-d|--drop-dns-outliers)
	    drop_dns_outliers=1
	    shift
	    ;;
	-f|--time-field)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		time_field=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-h|--highlight-outliers)
	    highlight_outliers=1
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		highlight_filter=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-k|--keep-db)
	    keep_db=1
	    shift
	    ;;
	-o|--order-by)
	    if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
		order_by_field=$2
		shift 2
	    else
		echo "Error: Argument for $1 is missing" >&2
		exit 1
	    fi
	    ;;
	-*|--*=)
	    echo "Error: Unsupported flag $1" >&2
	    exit 1
	;;
	*) # preserve positional arguments
	    PARAMS="$PARAMS $1"
	    shift
	    ;;
    esac
done

# reset positional arguments
eval set -- "$PARAMS"
results_file=${1:?no-results-file}

t=$(mktemp)
db=$(mktemp)

awk '{ print $1, $2, $4, $6, $8, $10, $12, $14, $16, $18 }' "$results_file" > "$t"

"$thisdir/sqlite3" "$db" <<EOF
CREATE TABLE results (queryid INTEGER PRIMARY KEY,
	timestamp TEXT,
	time_namelookup REAL,
	time_connect REAL,
	time_app_connect REAL,
	time_pretransfer REAL,
	time_starttransfer REAL,
	http_code INTEGER,
	port INTEGER,
	time_total REAL);
.separator " "
.import $t results
EOF

if [[ $drop_dns_outliers == 1 ]]; then
    count=$("$thisdir/sqlite3" "$db" "SELECT COUNT(*) FROM results WHERE time_namelookup >= 5.0")
    echo "Dropping $count DNS outliers at >= 5.0s"
    "$thisdir/sqlite3" "$db" "DELETE FROM results WHERE time_namelookup >= 5.0;"
fi

if [[ $highlight_outliers == 0 ]]; then
    count=$("$thisdir/sqlite3" "$db" "SELECT $time_field FROM results ORDER BY $time_field ASC LIMIT 1 OFFSET (SELECT COUNT(*) FROM results) * 99 / 100 - 1")
    echo "Automatically setting highlight filter to $time_field(99%)"
    highlight_filter=$count
fi

for i in namelookup connect app_connect pretransfer starttransfer total; do
    echo
    "$thisdir/sqlite3" "$db" <<EOF
.mode line
SELECT CAST(Min(time_$i) * 1000 AS INTEGER) AS "MIN-$i(ms)",
       CAST(Max(time_$i) * 1000 AS INTEGER) AS "MAX-$i(ms)",
       CAST(Avg(time_$i) * 1000 AS INTEGER) AS "AVG-$i(ms)",
       CAST(stdev(time_$i) * 1000 AS INTEGER) AS "STDEV-$i(ms)"
FROM   results;
EOF
done

for i in $bins; do
    echo
    "$thisdir/sqlite3" "$db" <<EOF
.headers on
.mode column

SELECT CAST(histo.bin * 1000 AS INTEGER) as "bin-$i(ms)",
       histo.bincount,
       histo.accumcount,
       Cast(Sum(bincount)
	      OVER (
		ORDER BY accumcount) / Cast((SELECT Count(time_$i)
					     FROM   results) AS REAL) * 100.0 AS
	    INTEGER)        AS "acccum%age"
FROM   Histo("results", "time_$i", ${NBINS:-20}, (SELECT Min(time_$i)
						FROM results) - 0.0001,
					     (SELECT Max(time_$i)
						FROM results) + 0.0001);
EOF
done

echo
"$thisdir/sqlite3" "$db" <<EOF
.headers on
.mode column
SELECT results.*, COUNT(*) OVER (ROWS UNBOUNDED PRECEDING) AS count
FROM results
WHERE $time_field >= $highlight_filter
ORDER BY $order_by_field
EOF

# Anaylis from:

echo
"$thisdir/sqlite3" "$db" <<EOF
.headers on
.mode column
select printf("%.6f", time_namelookup) AS "DNS Lookup",
       printf("%.6f", time_connect - time_namelookup) AS "TCP Connection",
       printf("%.6f", time_app_connect - time_connect) AS "TLS Handshake",
       printf("%.6f", time_connect - time_namelookup) AS "TTFB",
       printf("%.6f", time_starttransfer - time_pretransfer) AS "Server Processing",
       printf("%.6f", time_total - time_starttransfer) AS "Content Transfer",
       printf("%.6f", time_total) AS "TOTAL"
from results
WHERE $time_field >= $highlight_filter
ORDER BY $order_by_field
EOF

rm "$t"

if [ $keep_db -eq 1 ]; then
    echo "Database: $db"
else
    rm "$db"
fi
