apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: Service
  metadata:
    name: bz1829779
  spec:
    selector:
      app: bz1829779
    ports:
      - port: 3264
        name: http
        targetPort: 3264
        protocol: TCP
- apiVersion: v1
  kind: ConfigMap
  labels:
    app: bz1829779
  metadata:
    name: bz1829779-src-config
  data:
    go.mod: |
        module server
        go 1.14
    go.sum: |

    server.go: |
        package main
        import (
        	"encoding/json"
        	"fmt"
        	"io/ioutil"
        	"log"
        	"math/rand"
        	"net"
        	"net/http"
        	"net/url"
        	"os"
        	"sync/atomic"
        	"time"
        )
        const (
        	defaultHTTPPort = "3264"
        )
        func lookupEnv(key, defaultVal string) string {
        	if val, ok := os.LookupEnv(key); ok {
        		return val
        	}
        	return defaultVal
        }
        type RequestSummary struct {
        	URL     string
        	Method  string
        	Headers http.Header
        	Params  url.Values
        	Auth    *url.Userinfo
        	Body    string
        }
        var clientCon int64 = 0
        var randomSrc = rand.NewSource(time.Now().Unix())
        func init() {
        	log.SetFlags(log.LstdFlags | log.Lmicroseconds)
        }
        func main() {
        	connectionCh := make(chan bool)
        	doTicker := lookupEnv("TICKER", "false") == "true"
        	if doTicker {
        		ticker := time.Tick(1 * time.Second)
        		go func() {
        			var connections int64
        			for {
        				select {
        				case <-connectionCh:
        					connections += 1
        				case <-ticker:
        					log.Printf("connection/s: %v", connections)
        					connections = 0
        				}
        			}
        		}()
        	}
        	busyTime, err := time.ParseDuration(lookupEnv("BUSY_TIMEOUT", "0s"))
        	if err != nil {
        		log.Fatalf("failed to parse BUSY_TIMEOUT: %v", err)
        	}
        	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
        		handleConnStart := time.Now()
        		atomic.AddInt64(&clientCon, 1)
        		n := clientCon
        		if doTicker {
        			connectionCh <- true
        		}
        		log.Println("connection", n, r.RemoteAddr)
        		readAllStart := time.Now()
        		bytes, err := ioutil.ReadAll(r.Body)
        		if err != nil {
        			http.Error(w, err.Error(), http.StatusInternalServerError)
        			return
        		}
        		readAllDone := time.Now()
        		rs := RequestSummary{
        			URL:     r.URL.RequestURI(),
        			Method:  r.Method,
        			Headers: r.Header,
        			Params:  r.URL.Query(),
        			Auth:    r.URL.User,
        			Body:    string(bytes),
        		}
        		resp, err := json.MarshalIndent(&rs, "", "\t")
        		if err != nil {
        			http.Error(w, err.Error(), http.StatusInternalServerError)
        			return
        		}
        		if busyTime != 0 {
        			time.Sleep(busyTime)
        		}
        		writeStart := time.Now()
        		w.Write(resp)
        		w.Write([]byte("\n"))
        		writeDone := time.Now()
        		queryid := "0"
        		if val, ok := rs.Params["queryid"]; ok {
        			if len(val) > 0 {
        				queryid = val[0]
        			}
        		}
        		host, port, _ := net.SplitHostPort(r.RemoteAddr)
        		log.Printf("c-complete %v host %v port %v queryid %v busytime %f readbody %.9f writeresp %.9f total %.9f\n",
        			n,
        			host,
        			port,
        			queryid,
        			busyTime.Seconds(),
        			readAllDone.Sub(readAllStart).Seconds(),
        			writeDone.Sub(writeStart).Seconds(),
        			time.Now().Sub(handleConnStart).Seconds())
        	})
        	http.HandleFunc("/healthz", func(w http.ResponseWriter, req *http.Request) {
        		fmt.Fprint(w, "ready")
        	})
        	port := lookupEnv("HTTP_PORT", defaultHTTPPort)
        	log.Printf("Listening on port %v\n", port)
        	if err := http.ListenAndServe(":"+port, nil); err != nil {
        		log.Fatal(err)
        	}
        }
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: bz1829779
    labels:
      app: bz1829779
  spec:
    replicas: 2
    template:
      metadata:
        name: bz1829779
        labels:
          app: bz1829779
      spec:
        containers:
        - image: golang:1.14
          name: server
          command: ["go", "run", "/go/src/server.go"]
          env:
          - name: BUSY_TIMEOUT
            value: "0"
          - name: GO111MODULE
            value: "auto"
          - name: GOCACHE
            value: "/tmp"
          volumeMounts:
          - name: bz1829779-src-volume
            mountPath: /go/src
          readinessProbe:
            httpGet:
              path: /healthz
              port: 3264
            initialDelaySeconds: 3
            periodSeconds: 3
        volumes:
        - name: bz1829779-src-volume
          configMap:
            name: bz1829779-src-config
    selector:
      matchLabels:
        app: bz1829779
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: bz1829779
    name: bz1829779-edge
  spec:
    port:
      targetPort: 3264
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
      key: |-
        -----BEGIN EC PRIVATE KEY-----
        MHcCAQEEIAW+ecg2cZR47ItbI898N3nJduh9UJNv+b0cOwH/Z1BEoAoGCCqGSM49
        AwEHoUQDQgAEx0/5sEgiUPFdcbd4dSllkul8s68RQ5WxIjfwWYMdfYLiLLqP1lkz
        4UYpwAW/t63qBx3jRhPgkUxh5saJP9Qu5Q==
        -----END EC PRIVATE KEY-----
      certificate: |-
        -----BEGIN CERTIFICATE-----
        MIIBgTCCASagAwIBAgIRALutWdExjxX8fWljW+lcYbswCgYIKoZIzj0EAwIwJDEQ
        MA4GA1UEChMHUmVkIEhhdDEQMA4GA1UEAxMHUm9vdCBDQTAgFw0yMDA1MTExMDU2
        NThaGA8yMTIwMDQxNzEwNTY1OFowJjEQMA4GA1UEChMHUmVkIEhhdDESMBAGA1UE
        AwwJdGVzdF9jZXJ0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEx0/5sEgiUPFd
        cbd4dSllkul8s68RQ5WxIjfwWYMdfYLiLLqP1lkz4UYpwAW/t63qBx3jRhPgkUxh
        5saJP9Qu5aM1MDMwDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMB
        MAwGA1UdEwEB/wQCMAAwCgYIKoZIzj0EAwIDSQAwRgIhAOIx8885y8tX/Vv94UGx
        hWC/O1Hzi15kOT0WQ/UKUMjMAiEA40uW9P6k+i1cDwgfBBMzgDFQa9GAb4FqM8Wr
        PaUMdqg=
        -----END CERTIFICATE-----
    to:
      kind: Service
      name: bz1829779
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: bz1829779
    name: bz1829779-insecure
  spec:
    port:
      targetPort: 3264
    to:
      kind: Service
      name: bz1829779
      weight: 100
    wildcardPolicy: None
