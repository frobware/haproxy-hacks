global
  maxconn 200
  daemon
  log 127.0.0.1:514 local0 info
  nbthread 1

# server-state-file /tmp/lib/haproxy/run/haproxy.state
  stats socket /tmp/lib/haproxy/run/haproxy.sock mode 600 level admin expose-fd listeners
  # stats timeout 2m

defaults
  log global
  option httplog
  option logasap

  # Long timeout for WebSocket connections.
  errorfile 503 ./503.http

  timeout connect 30s
  timeout client 30s
  timeout client-fin 1s
  timeout server 30s
  timeout server-fin 1s
  timeout http-request 10s
  timeout http-keep-alive 300s

  # Long timeout for WebSocket connections.
  timeout tunnel 30s

frontend public
  bind :8080
  mode http
  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP
  monitor-uri /_______internal_router_healthz

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # check if we need to redirect/force using https.
  acl secure_redirect base,map_reg(os_route_http_redirect.map) -m found
  redirect scheme https if secure_redirect

  use_backend %[base,map_reg(os_http_be.map)]

  default_backend openshift_default

frontend public_ssl
  option tcplog
  bind :8443
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }

  # if the connection is SNI and the route is a passthrough don't use the termination backend, just use the tcp backend
  # for the SNI case, we also need to compare it in case-insensitive mode (by converting it to lowercase) as RFC 4343 says
  acl sni req.ssl_sni -m found
  acl sni_passthrough req.ssl_sni,lower,map_reg(./os_sni_passthrough.map) -m found
  use_backend %[req.ssl_sni,lower,map_reg(./os_tcp_be.map)] if sni sni_passthrough

  # if the route is SNI and NOT passthrough enter the termination flow
  use_backend be_sni if sni

  # non SNI requests should enter a default termination backend rather than the custom cert SNI backend since it
  # will not be able to match a cert to an SNI host
  default_backend be_no_sni

##########################################################################
# TLS SNI
#
# When using SNI we can terminate encryption with custom certificates.
# Certs will be stored in a directory and will be matched with the SNI host header
# which must exist in the CN of the certificate.  Certificates must be concatenated
# as a single file (handled by the plugin writer) per the haproxy documentation.
#
# Finally, check re-encryption settings and re-encrypt or just pass along the unencrypted
# traffic
##########################################################################
backend be_sni
  server fe_sni :10444 weight 1

frontend fe_sni
  # terminate ssl on edge
  bind :10444 ssl crt /home/aim/spicy.int.frobware.com.pem crt-list ./cert_config.map
  mode http

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # Search from most specific to general path (host case).
  # Note: If no match, haproxy uses the default_backend, no other
  #       use_backend directives below this will be processed.
  use_backend %[base,map_reg(os_edge_reencrypt_be.map)]

  default_backend openshift_default

# backend for when sni does not exist, or ssl term needs to happen on the edge
backend be_no_sni

  server fe_no_sni 127.0.0.1:10443 weight 1

frontend fe_no_sni
  # terminate ssl on edge
  bind 127.0.0.1:10443 ssl crt /home/aim/spicy.int.frobware.com.pem
  mode http

  # Strip off Proxy headers to prevent HTTpoxy (https://httpoxy.org/)
  http-request del-header Proxy

  # DNS labels are case insensitive (RFC 4343), we need to convert the hostname into lowercase
  # before matching, or any requests containing uppercase characters will never match.
  http-request set-header Host %[req.hdr(Host),lower]

  # map to backend
  # Search from most specific to general path (host case).
  # Note: If no match, haproxy uses the default_backend, no other
  #       use_backend directives below this will be processed.
  use_backend %[base,map_reg(./os_edge_reencrypt_be.map)]

  default_backend openshift_default

backend openshift_default
  mode http
  option forwardfor
  #option http-keep-alive
  option http-pretend-keepalive

backend be_edge_http:default:grpc-interop-edge
  mode http
  option redispatch
  option forwardfor
  balance roundrobin
  timeout check 3000ms
  http-request set-header X-Forwarded-Host %[req.hdr(host)]
  http-request set-header X-Forwarded-Port %[dst_port]
  http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
  http-request set-header X-Forwarded-Proto https if { ssl_fc }
  http-request set-header X-Forwarded-Proto-Version h2 if { ssl_fc_alpn -i h2 }
  http-request add-header Forwarded for=%[src];host=%[req.hdr(host)];proto=%[req.hdr(X-Forwarded-Proto)]
server pod:grpc-interop:grpc-interop:192.168.7.64:9000 192.168.7.64:9000 cookie 094c1c2fba73c5173a67efa50555c79f weight 256

