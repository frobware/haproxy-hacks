global
# log 127.0.0.1:514 local0 debug
# log /dev/stdout format raw local0 debug
  nbthread 4
  #server-state-file /var/tmp/haproxy/run/haproxy.state
  stats socket /var/tmp/haproxy/run/haproxy.sock mode 600 level admin expose-fd listeners
  tune.ssl.default-dh-param 2048
  tune.maxaccept 2
  
defaults
  #option http-use-htx
  log global

  # Long timeout for WebSocket connections.
  errorfile 503 503.http

  timeout connect 5s
  timeout client 30s
  timeout client-fin 1s
  timeout server 30s
  timeout server-fin 1s
  timeout http-request 10s
  timeout http-keep-alive 300s

  option log-health-checks
# option tcplog
  # option logasap
  # option httplog
	
frontend public
  bind :18080
  mode http
  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP
  monitor-uri /_______internal_router_healthz
  http-request del-header Proxy
  http-request set-header Host %[req.hdr(Host),lower]
  acl secure_redirect base,map_reg(os_route_http_redirect.map) -m found
  redirect scheme https if secure_redirect
  use_backend %[base,map_reg(os_http_be.map)]
  default_backend openshift_default

frontend public_ssl_no_hop
  #option httplog
  mode http
  bind :18444 ssl crt /home/aim/domain.pem crt-list cert_config.map
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
  acl sni req.ssl_sni -m found
  acl sni_passthrough req.ssl_sni,lower,map_reg(os_sni_passthrough.map) -m found
  use_backend %[base,map_reg(os_edge_reencrypt_be.map)]

frontend public_ssl
  # option tcplog
  mode tcp
  bind :18443
  tcp-request inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
  acl sni req.ssl_sni -m found
  acl sni_passthrough req.ssl_sni,lower,map_reg(os_sni_passthrough.map) -m found
  use_backend %[req.ssl_sni,lower,map_reg(os_tcp_be.map)] if sni sni_passthrough
  use_backend be_sni if sni
  default_backend be_no_sni

backend be_sni
  server fe_sni unix@/var/tmp/haproxy/run/haproxy-sni.sock weight 1 send-proxy

frontend fe_sni
  bind unix@/var/tmp/haproxy/run/haproxy-sni.sock ssl crt /home/aim/domain.pem crt-list cert_config.map accept-proxy
  mode http
  http-request del-header Proxy
  http-request set-header Host %[req.hdr(Host),lower]
  use_backend %[base,map_reg(os_edge_reencrypt_be.map)]
  default_backend openshift_default

backend be_no_sni
  server fe_no_sni unix@/var/tmp/haproxy/run/haproxy-no-sni.sock weight 1 send-proxy

frontend fe_no_sni
  # terminate ssl on edge
  bind unix@/var/tmp/haproxy/run/haproxy-no-sni.sock ssl crt /home/aim/domain.pem
  mode http
  http-request set-header Host %[req.hdr(Host),lower]
  use_backend %[base,map_reg(os_edge_reencrypt_be.map)]
  default_backend openshift_default

backend openshift_default
  mode http
  option forwardfor
  #option http-keep-alive
  option http-pretend-keepalive

backend be_edge_http:default:my-server
    mode http
    balance leastconn
    option redispatch
    option forwardfor

#   timeout check 5000ms
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    cookie ea8ef86312963dbe71819b66d8c42e41 insert indirect nocache httponly secure
    server web00 192.168.7.5:9090 cookie 5a392f7b9de5f6501616ddddc7ab1bf0 check inter 5000
    # server web01 192.168.7.5:9090 cookie 5a392f7b9de5f6501616ddddc7ab1bf1 check inter 5000
    # server web02 192.168.7.5:9090 cookie 5a392f7b9de5f6501616ddddc7ab1bf2 check inter 5000
    # server web03 192.168.7.5:9090 cookie 5a392f7b9de5f6501616ddddc7ab1bf3 check inter 5000
